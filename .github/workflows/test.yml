# GitHub リポジトリの [アクション] タブに表示されるワークフローの名前。
# 省略可能である
name: test
# ワークフロー実行をトリガーするイベントを指定している
on:
  push:
    branches:
      - "main"
  pull_request:
# ワークフローで実行されるすべてのジョブをグループ化する
jobs:
  # ジョブは同じランナーで実行される、ワークフロー内の一連の ステップ である。
  test:
    # ランナーは、ワークフローがトリガーされると実行されるサーバーである。
    # 各ランナーでは、一度に 1つのジョブを実行できる
    # Ubuntu Linux ランナーの最新バージョンで実行されるようにジョブを構成する。
    # これは、ジョブが GitHub によってホストされている新しい仮想マシンで実行されるということ
    runs-on: ubuntu-latest
    # ジョブで実行されるすべてのステップをグループ化している
    # ステップ = アクション or シェルスクリプトってことか。
    # このセクションで入れ子になった各項目は、個別のアクションまたはシェル スクリプトである。
    steps:
    # アクション は、GitHub Actions 用のカスタム アプリケーションであり、複雑で頻繁に繰り返されるタスクを実行する。
    # actions/setup-go@v3 アクションを使用して、指定されたバージョン (1.18以上 を使用) の Go をインストールします。
    - uses: actions/setup-go@v3
      with:
        go-version: ">=1.18"
    # actions/checkout@v3は、リポジトリからソースコードを取得するアクション
    - uses: actions/checkout@v3
    # 、go test ./...は、カレントディレクトリとそのサブディレクトリ内のすべてのテストを実行するコマンド。
    # ./...は、現在のディレクトリとそのサブディレクトリ内のすべてのパッケージをテスト対象にすることを意味する。
    # -coverprofile=coverage.outは、テストのカバレッジ情報をファイルに保存するためのフラグである。
    # coverage.outは出力ファイルの名前であり、ここではカバレッジ情報を保存するファイル名として指定されている。
    - run: go test ./... -coverprofile=coverage.out
    # GitHubで表示されるステップ名を表してる
    - name: report coverage
      # k1LoW/octocov-action@v0は、GitHub Actions上で実行したテスト結果のカバレッジをPRにコメントしてくれるワークフロー
      # すでにパッケージ化された処理を共有し、再利用する事ができる
      # ランナーにubuntuを指定しているので、ubuntuで実行可能なことは、ほとんど実行可能。
      uses: k1LoW/octocov-action@v0