# ワークフローごとにymlファイルを作る
# GitHub リポジトリの [アクション] タブに表示されるワークフローの名前。
# 各ワークフロー
# 省略可能である
name: test
# ワークフロー実行をトリガーするイベントを指定している
on:
  push:
    branches:
      - "main"
  pull_request:
# ワークフローで実行されるすべてのジョブをグループ化する
jobs:
  # ジョブは同じランナーで実行される、ワークフロー内の一連の ステップ である。
  # testはジョブを表す一意な識別子。どんな識別子をつけても良い
  test:
    # ランナーは、ワークフローがトリガーされると実行されるサーバーである。
    # 各ランナーでは、一度に 1つのジョブを実行できる
    # Ubuntu Linux ランナーの最新バージョンで実行されるようにジョブを構成する。
    # これは、ジョブが GitHub によってホストされている新しい仮想マシンで実行されるということ
    runs-on: ubuntu-latest
    # GitHub ActionsのワークフローでDBに接続してテストを行うには、GitHub Actionsのサービスコンテナを使う。
    # このサービスコンテナはただのDockerコンテナである
    services:
      mysql:
        image: mysql:8
        options: >-
          --health-cmd "mysqladmin ping -h localhost"
          --health-interval 202
          --health-timeout 10s
          --health-retries 10
        # ジョブをランナーマシン上で動かしている場合、サービスコンテナはランナーマシンに対してデフォルトではポートを公開していない。
        # ジョブがDockerコンテナ内で実行されるなら、ポートをホストあるいはサービスコンテナにマップする必要はない。
        # ジョブがランナーマシン上で直接実行されるなら、必要なサービスコンテナのポートはホストランナーマシンのポートにマップする必要がある。
        # DBコンテナのポートとホストのポートをマッピングしておく
        ports:
          - 3306:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: todo
          MYSQL_USER: todo
          MYSQL_PASSWORD: todo
      redis:
        image: redis
        # optionsはRedisが起動するまでジョブの実行を待機するためのコマンド
        options: ->
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        # redisコンテナのポートとホストのポートをマッピングしておく
        ports:
          - 6379:6379
    # ジョブで実行されるすべてのステップをグループ化している
    # ステップとは アクション or シェルスクリプトのどちらかってことか。
    # このセクションで入れ子になった各項目は、個別のアクションまたはシェル スクリプトである。
    steps:
    # アクション は、GitHub Actions 用のカスタム アプリケーションであり、複雑で頻繁に繰り返されるタスクを実行する。
    # actions/setup-go@v3 アクションを使用して、指定されたバージョン (1.18以上 を使用) の Go をインストールします。
    - uses: actions/setup-go@v3
      with:
        go-version: ">=1.18"
    # actions/checkout@v3は、リポジトリからソースコードを取得するアクション
    - uses: actions/checkout@v3
    # テストを行う前にDBマイグレーションを行う
    # こうすることで、DBのテストでエラーが起きたりしない
    - run:
        go intall github.com/k0kubun/sqldef/cmd/mysqldef@latest
        mysqldef -u todo -p todo -h 127.0.0.1 -p 3306 todo < ./_tools/mysql/schema.sql
    # 、go test ./...は、カレントディレクトリとそのサブディレクトリ内のすべてのテストを実行するコマンド。
    # ./...は、現在のディレクトリとそのサブディレクトリ内のすべてのパッケージをテスト対象にすることを意味する。
    # -coverprofile=coverage.outは、テストのカバレッジ情報をファイルに保存するためのフラグである。
    # coverage.outは出力ファイルの名前であり、ここではカバレッジ情報を保存するファイル名として指定されている。
    - run: go test ./... -coverprofile=coverage.out
    # GitHubで表示されるステップ名を表してる
    - name: report coverage
      # k1LoW/octocov-action@v0は、GitHub Actions上で実行したテスト結果のカバレッジをPRにコメントしてくれるワークフロー
      # すでにパッケージ化された処理を共有し、再利用する事ができる
      # ランナーにubuntuを指定しているので、ubuntuで実行可能なことは、ほとんど実行可能。
      uses: k1LoW/octocov-action@v0